{"timestamp":"2025-05-30T22:51:05.361211","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-30T22:51:05.361621","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/reddit_btc_pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-30T22:51:05.696632Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:05.698611Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:05.699614Z","level":"info","event":"Current task name:check_new_reddit_posts","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:05.702599Z","level":"info","event":"Dag name:reddit_btc_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.467850Z","level":"info","event":"STDOUT:","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468101Z","level":"info","event":"STDERR: Traceback (most recent call last):","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468222Z","level":"info","event":"  File \"/opt/airflow/user_pipeline/scripts/check_new_reddit_posts.py\", line 37, in <module>","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468318Z","level":"info","event":"    count = check_for_new_reddit_posts()","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468409Z","level":"info","event":"            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468483Z","level":"info","event":"  File \"/opt/airflow/user_pipeline/scripts/check_new_reddit_posts.py\", line 28, in check_for_new_reddit_posts","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468577Z","level":"info","event":"    existing_df = pd.read_csv(master_file_path)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468651Z","level":"info","event":"                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468726Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 948, in read_csv","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468796Z","level":"info","event":"    return _read(filepath_or_buffer, kwds)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468866Z","level":"info","event":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468939Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 611, in _read","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.469007Z","level":"info","event":"    parser = TextFileReader(filepath_or_buffer, **kwds)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.469089Z","level":"info","event":"             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.469169Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 1448, in __init__","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.469234Z","level":"info","event":"    self._engine = self._make_engine(f, self.engine)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.469323Z","level":"info","event":"                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.469421Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 1723, in _make_engine","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.469523Z","level":"info","event":"    return mapping[engine](f, **self.options)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.469636Z","level":"info","event":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.469798Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 93, in __init__","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.469878Z","level":"info","event":"    self._reader = parsers.TextReader(src, **kwds)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.469957Z","level":"info","event":"                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.470030Z","level":"info","event":"  File \"parsers.pyx\", line 586, in pandas._libs.parsers.TextReader.__cinit__","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.470091Z","level":"info","event":"pandas.errors.EmptyDataError: No columns to parse from file","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.470172Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.470292Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.470365Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.470442Z","level":"info","event":"Task operator:<Task(ShortCircuitOperator): check_new_reddit_posts>","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:51:07.468346","level":"info","event":"Done. Returned value was: False","logger":"airflow.task.operators.airflow.providers.standard.operators.python.ShortCircuitOperator"}
{"timestamp":"2025-05-30T22:51:07.468432","level":"info","event":"Condition result is False","logger":"airflow.task.operators.airflow.providers.standard.operators.python.ShortCircuitOperator"}
{"timestamp":"2025-05-30T22:51:07.468477","level":"info","event":"Skipping downstream tasks","logger":"airflow.task.operators.airflow.providers.standard.operators.python.ShortCircuitOperator"}
{"timestamp":"2025-05-30T22:51:07.468791","level":"info","event":"Skipping downstream tasks.","logger":"task"}
