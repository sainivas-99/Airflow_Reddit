{"timestamp":"2025-05-31T01:11:27.381866","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-31T01:11:27.382161","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/reddit_btc_pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-31T01:11:27.403825Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:27.404697Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:27.404837Z","level":"info","event":"Current task name:check_new_reddit_posts","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:27.404932Z","level":"info","event":"Dag name:reddit_btc_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.548821Z","level":"info","event":"STDOUT:","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.549077Z","level":"info","event":"STDERR: Traceback (most recent call last):","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.549211Z","level":"info","event":"  File \"/opt/airflow/user_pipeline/scripts/check_new_reddit_posts.py\", line 37, in <module>","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.549350Z","level":"info","event":"    result = check_for_new_reddit_posts()","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.549629Z","level":"info","event":"             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.550078Z","level":"info","event":"  File \"/opt/airflow/user_pipeline/scripts/check_new_reddit_posts.py\", line 28, in check_for_new_reddit_posts","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.550179Z","level":"info","event":"    existing_df = pd.read_csv(master_file_path)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.550272Z","level":"info","event":"                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.550364Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 948, in read_csv","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.550460Z","level":"info","event":"    return _read(filepath_or_buffer, kwds)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.550543Z","level":"info","event":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.550649Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 611, in _read","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.550770Z","level":"info","event":"    parser = TextFileReader(filepath_or_buffer, **kwds)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.550844Z","level":"info","event":"             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.550915Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 1448, in __init__","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.550984Z","level":"info","event":"    self._engine = self._make_engine(f, self.engine)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.551051Z","level":"info","event":"                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.551118Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 1723, in _make_engine","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.551182Z","level":"info","event":"    return mapping[engine](f, **self.options)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.551244Z","level":"info","event":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.551571Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 93, in __init__","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.551639Z","level":"info","event":"    self._reader = parsers.TextReader(src, **kwds)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.551705Z","level":"info","event":"                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.551765Z","level":"info","event":"  File \"parsers.pyx\", line 586, in pandas._libs.parsers.TextReader.__cinit__","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.551827Z","level":"info","event":"pandas.errors.EmptyDataError: No columns to parse from file","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.551897Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.552025Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.552097Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.552170Z","level":"info","event":"Task operator:<Task(ShortCircuitOperator): check_new_reddit_posts>","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-31T01:11:29.549538","level":"info","event":"Done. Returned value was: False","logger":"airflow.task.operators.airflow.providers.standard.operators.python.ShortCircuitOperator"}
{"timestamp":"2025-05-31T01:11:29.549634","level":"info","event":"Condition result is False","logger":"airflow.task.operators.airflow.providers.standard.operators.python.ShortCircuitOperator"}
{"timestamp":"2025-05-31T01:11:29.549744","level":"info","event":"Skipping downstream tasks","logger":"airflow.task.operators.airflow.providers.standard.operators.python.ShortCircuitOperator"}
{"timestamp":"2025-05-31T01:11:29.550123","level":"info","event":"Skipping downstream tasks.","logger":"task"}
