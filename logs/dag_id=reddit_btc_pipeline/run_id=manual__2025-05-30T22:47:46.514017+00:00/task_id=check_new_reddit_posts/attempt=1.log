{"timestamp":"2025-05-30T22:47:48.422638","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-30T22:47:48.423006","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/reddit_btc_pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-30T22:47:48.454178Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:48.454323Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:48.454393Z","level":"info","event":"Current task name:check_new_reddit_posts","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:48.454444Z","level":"info","event":"Dag name:reddit_btc_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.444181Z","level":"info","event":"STDOUT:","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.444419Z","level":"info","event":"STDERR: Traceback (most recent call last):","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.444539Z","level":"info","event":"  File \"/opt/airflow/user_pipeline/scripts/check_new_reddit_posts.py\", line 37, in <module>","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.444631Z","level":"info","event":"    count = check_for_new_reddit_posts()","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.444710Z","level":"info","event":"            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.444787Z","level":"info","event":"  File \"/opt/airflow/user_pipeline/scripts/check_new_reddit_posts.py\", line 28, in check_for_new_reddit_posts","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.444862Z","level":"info","event":"    existing_df = pd.read_csv(master_file_path)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.444937Z","level":"info","event":"                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445010Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 948, in read_csv","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445078Z","level":"info","event":"    return _read(filepath_or_buffer, kwds)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445150Z","level":"info","event":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445218Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 611, in _read","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445284Z","level":"info","event":"    parser = TextFileReader(filepath_or_buffer, **kwds)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445349Z","level":"info","event":"             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445427Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 1448, in __init__","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445529Z","level":"info","event":"    self._engine = self._make_engine(f, self.engine)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445615Z","level":"info","event":"                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445687Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/readers.py\", line 1723, in _make_engine","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445762Z","level":"info","event":"    return mapping[engine](f, **self.options)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445834Z","level":"info","event":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.445969Z","level":"info","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 93, in __init__","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.446041Z","level":"info","event":"    self._reader = parsers.TextReader(src, **kwds)","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.446109Z","level":"info","event":"                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.446194Z","level":"info","event":"  File \"parsers.pyx\", line 586, in pandas._libs.parsers.TextReader.__cinit__","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.446269Z","level":"info","event":"pandas.errors.EmptyDataError: No columns to parse from file","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.446337Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.446445Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.446513Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.446581Z","level":"info","event":"Task operator:<Task(ShortCircuitOperator): check_new_reddit_posts>","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-30T22:47:50.444625","level":"info","event":"Done. Returned value was: False","logger":"airflow.task.operators.airflow.providers.standard.operators.python.ShortCircuitOperator"}
{"timestamp":"2025-05-30T22:47:50.444707","level":"info","event":"Condition result is False","logger":"airflow.task.operators.airflow.providers.standard.operators.python.ShortCircuitOperator"}
{"timestamp":"2025-05-30T22:47:50.444739","level":"info","event":"Skipping downstream tasks","logger":"airflow.task.operators.airflow.providers.standard.operators.python.ShortCircuitOperator"}
{"timestamp":"2025-05-30T22:47:50.445020","level":"info","event":"Skipping downstream tasks.","logger":"task"}
